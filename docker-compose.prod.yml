version: '3.8'

services:
  # Infrastructure Services
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: configmanager-sqlserver-prod
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_SERVER_PASSWORD:-ConfigManager123!}
      - MSSQL_PID=Standard
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./scripts/sql:/docker-entrypoint-initdb.d
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SQL_SERVER_PASSWORD:-ConfigManager123!} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  mongo:
    image: mongo:7.0
    container_name: configmanager-mongo-prod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-ConfigManager123!}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo:/docker-entrypoint-initdb.d
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: configmanager-rabbitmq-prod
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-ConfigManager123!}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Application Services
  api:
    build:
      context: .
      dockerfile: src/Api/Dockerfile
    container_name: configmanager-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sql-server,1433;Database=ConfigurationManager;User Id=sa;Password=${SQL_SERVER_PASSWORD:-ConfigManager123!};TrustServerCertificate=true;
      - MongoDB__ConnectionString=mongodb://admin:${MONGO_PASSWORD:-ConfigManager123!}@mongo:27017
      - MongoDB__DatabaseName=ConfigurationManagerCache
      - RabbitMQ__ConnectionString=amqp://admin:${RABBITMQ_PASSWORD:-ConfigManager123!}@rabbitmq:5672
      - Serilog__MinimumLevel__Default=Information
    ports:
      - "8001:8080"
    depends_on:
      sql-server:
        condition: service_healthy
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  blazorapp:
    build:
      context: .
      dockerfile: src/BlazorApp/Dockerfile
    container_name: configmanager-blazorapp-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ApiSettings__BaseUrl=http://api:8080
      - Serilog__MinimumLevel__Default=Information
    ports:
      - "8002:8080"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: configmanager-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - blazorapp
    networks:
      - configmanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: configmanager-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - configmanager-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: configmanager-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - configmanager-network
    restart: unless-stopped

volumes:
  sqlserver_data:
  mongo_data:
  rabbitmq_data:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  configmanager-network:
    driver: bridge
