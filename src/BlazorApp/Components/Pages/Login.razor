@page "/login"
@rendermode InteractiveServer
@using Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - Configuration Manager</PageTitle>

<div class="rz-p-4">
    <RadzenCard class="rz-mx-auto" Style="max-width: 400px; margin-top: 5rem;">
        <RadzenStack Gap="1rem">
            <RadzenText TextStyle="TextStyle.H4" class="rz-text-align-center">
                Configuration Manager
            </RadzenText>
            
            <RadzenText TextStyle="TextStyle.H6" class="rz-text-align-center rz-color-secondary">
                Sign in to your account
            </RadzenText>

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator />

                <RadzenStack Gap="1rem">
                    <RadzenFormField Text="Username" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@loginModel.Username"
                                     Placeholder="Enter your username"
                                     Style="width: 100%"
                                     Disabled="@isLoading" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@loginModel.Password"
                                      Placeholder="Enter your password"
                                      Style="width: 100%"
                                      Disabled="@isLoading" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </RadzenFormField>

                    <RadzenButton ButtonType="ButtonType.Submit"
                                Size="ButtonSize.Large"
                                Style="width: 100%"
                                IsBusy="@isLoading"
                                Text="@(isLoading ? "Signing in..." : "Sign In")"
                                Disabled="@isLoading" />

                    <!-- Debug button for testing -->
                    <RadzenButton ButtonType="ButtonType.Button"
                                Size="ButtonSize.Medium"
                                Style="width: 100%"
                                Variant="Variant.Text"
                                Click="@HandleDebugLogin"
                                Text="Quick Login (testuser/password123)"
                                Disabled="@isLoading" />
                </RadzenStack>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                    @errorMessage
                </RadzenAlert>
            }
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private LoginModel loginModel { get; set; } = new();

    private bool isLoading = false;
    private string errorMessage = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is already authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                Navigation.NavigateTo(ReturnUrl ?? "/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking authentication state: {ex.Message}");
        }
    }

    private async Task HandleLogin()
    {
        Console.WriteLine("HandleLogin called");
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Attempting login with username: {loginModel.Username}");
            var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            Console.WriteLine($"Login result: {success}");

            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Login Successful",
                    Detail = "Welcome back!",
                    Duration = 3000
                });

                Navigation.NavigateTo(ReturnUrl ?? "/", true);
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login exception: {ex.Message}");
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form validation failed");
        errorMessage = "Please fill in all required fields.";
    }

    private async Task HandleDebugLogin()
    {
        Console.WriteLine("Debug login clicked");
        loginModel.Username = "testuser";
        loginModel.Password = "password123";
        StateHasChanged();
        await HandleLogin();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
