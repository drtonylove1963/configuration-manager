@page "/configurations"
@rendermode InteractiveServer
@using Client.Services
@using Application.DTOs.Configuration
@using Application.DTOs.Environment
@using Application.DTOs.ConfigurationGroup
@using Domain.ValueObjects
@inject IConfigurationApiClient ConfigurationClient
@inject IEnvironmentApiClient EnvironmentClient
@inject IConfigurationGroupApiClient GroupClient
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject DialogService DialogService

<PageTitle>Configurations</PageTitle>

<div class="rz-p-4">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" class="rz-mb-4">
        <RadzenText TextStyle="TextStyle.H4">Configuration Management</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
            <RadzenButton Text="Test Dialog"
                          ButtonStyle="ButtonStyle.Warning"
                          Icon="bug_report"
                          Click="@TestDialog" />
            <RadzenButton Text="Create Configuration"
                          ButtonStyle="ButtonStyle.Primary"
                          Icon="add"
                          Click="@(() => Navigation.NavigateTo("/configurations/create"))" />
        </RadzenStack>
    </RadzenStack>

    <RadzenCard class="rz-mb-4">
        <RadzenStack Gap="1rem">
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenTextBox @bind-Value="_searchTerm"
                                   Placeholder="Search configurations"
                                   @onkeyup="@OnSearchKeyUp"
                                   Style="width: 100%;">
                        <RadzenIcon Icon="search" Slot="end" />
                    </RadzenTextBox>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenDropDown @bind-Value="_selectedEnvironmentId"
                                    Data="@_environments"
                                    TextProperty="Name"
                                    ValueProperty="Id"
                                    Placeholder="Select Environment"
                                    AllowClear="true"
                                    Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenDropDown @bind-Value="_selectedGroupId"
                                    Data="@_groups"
                                    TextProperty="Name"
                                    ValueProperty="Id"
                                    Placeholder="Select Group"
                                    AllowClear="true"
                                    Style="width: 100%;" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="3">
                    <RadzenButton Text="Create Configuration"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Icon="add"
                                  Click="@(() => Navigation.NavigateTo("/configurations/create"))"
                                  Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>

    <RadzenDataGrid @ref="_dataGrid"
                    Data="@_configurations"
                    IsLoading="@_loading"
                    AllowFiltering="false"
                    AllowSorting="true"
                    TItem="ConfigurationDto"
                    RowSelect="@OnRowClick">
        <Columns>
            <RadzenDataGridColumn TItem="ConfigurationDto" Property="Key" Title="Key" Sortable="true" />
            <RadzenDataGridColumn TItem="ConfigurationDto" Property="EnvironmentName" Title="Environment" Sortable="true" />
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Group" Sortable="true">
                <Template Context="config">
                    @(config.GroupName ?? "No Group")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Type" Sortable="true">
                <Template Context="config">
                    @config.ValueType.ToString()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Value" Sortable="false">
                <Template Context="config">
                    @if (config.IsEncrypted)
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="Encrypted" />
                    }
                    else
                    {
                        <span>@(config.Value.Length > 50 ? config.Value.Substring(0, 50) + "..." : config.Value)</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Status" Sortable="false">
                <Template Context="config">
                    <RadzenBadge BadgeStyle="@(config.IsActive ? BadgeStyle.Success : BadgeStyle.Secondary)"
                                 Text="@(config.IsActive ? "Active" : "Inactive")" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Required" Sortable="false">
                <Template Context="config">
                    @if (config.IsRequired)
                    {
                        <RadzenIcon Icon="star" Style="color: var(--rz-warning);" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ConfigurationDto" Title="Actions" Sortable="false">
                <Template Context="config">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton ButtonStyle="ButtonStyle.Light"
                                      Icon="edit"
                                      Size="ButtonSize.Small"
                                      Click="@((args) => EditConfiguration(config.Id))"
                                      @onclick:stopPropagation="true" />
                        <RadzenButton ButtonStyle="ButtonStyle.Light"
                                      Icon="history"
                                      Size="ButtonSize.Small"
                                      Click="@((args) => ViewHistory(config.Id))"
                                      @onclick:stopPropagation="true" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                      Icon="delete"
                                      Size="ButtonSize.Small"
                                      Click="@((args) => ShowDeleteConfirmation(config))"
                                      @onclick:stopPropagation="true" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<!-- Delete Confirmation Dialog -->
@if (_showDeleteDialog && _configurationToDelete != null)
{
    <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050; display: flex; align-items: center; justify-content: center;">
        <RadzenCard style="max-width: 500px; width: 90%; z-index: 1051;">
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H6">Delete Configuration</RadzenText>
                <RadzenText>
                    Are you sure you want to delete the configuration '<strong>@_configurationToDelete.Key</strong>'?
                    This action cannot be undone.
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton Text="Cancel"
                                  ButtonStyle="ButtonStyle.Light"
                                  Click="@CancelDelete" />
                    <RadzenButton Text="Delete"
                                  ButtonStyle="ButtonStyle.Danger"
                                  Click="@ConfirmDelete" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </div>
}

@code {
    private RadzenDataGrid<ConfigurationDto>? _dataGrid;
    private List<ConfigurationDto> _configurations = new();
    private List<EnvironmentDto> _environments = new();
    private List<ConfigurationGroupDto> _groups = new();
    private bool _loading = true;
    private string _searchTerm = string.Empty;
    private Guid? _selectedEnvironmentId;
    private Guid? _selectedGroupId;
    private bool _showDeleteDialog = false;
    private ConfigurationDto? _configurationToDelete;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Configurations page OnInitializedAsync called");
        await LoadData();
        Console.WriteLine("Configurations page LoadData completed");
    }

    private async Task LoadData()
    {
        Console.WriteLine("LoadData method started");
        _loading = true;
        try
        {
            Console.WriteLine("Making API calls...");
            // Load real data from API
            var configurationsTask = ConfigurationClient.GetAllAsync();
            var environmentsTask = EnvironmentClient.GetAllAsync();
            var groupsTask = GroupClient.GetAllAsync();

            await Task.WhenAll(configurationsTask, environmentsTask, groupsTask);

            _configurations = (await configurationsTask).ToList();
            _environments = (await environmentsTask).ToList();
            _groups = (await groupsTask).ToList();

            Console.WriteLine($"Data loaded: {_configurations.Count} configurations, {_environments.Count} environments, {_groups.Count} groups");

            // If no data loaded, show a notification
            if (_configurations.Count == 0)
            {
                NotificationService.Notify(NotificationSeverity.Warning, "No Data", "No configurations found in the database");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadData: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error loading data: {ex.Message}");

            // Fallback to empty lists to prevent null reference errors
            _configurations = new List<ConfigurationDto>();
            _environments = new List<EnvironmentDto>();
            _groups = new List<ConfigurationGroupDto>();
        }
        finally
        {
            _loading = false;
            Console.WriteLine("LoadData method completed");
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            // Simple mock filtering
            var filtered = _configurations.AsEnumerable();

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                filtered = filtered.Where(c => c.Key.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            if (_selectedEnvironmentId.HasValue)
            {
                var envName = _environments.FirstOrDefault(e => e.Id == _selectedEnvironmentId)?.Name;
                if (!string.IsNullOrEmpty(envName))
                {
                    filtered = filtered.Where(c => c.EnvironmentName == envName);
                }
            }

            if (_selectedGroupId.HasValue)
            {
                var groupName = _groups.FirstOrDefault(g => g.Id == _selectedGroupId)?.Name;
                if (!string.IsNullOrEmpty(groupName))
                {
                    filtered = filtered.Where(c => c.GroupName == groupName);
                }
            }

            _configurations = filtered.ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error filtering configurations: {ex.Message}");
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilters();
        }
    }

    private void OnRowClick(ConfigurationDto configuration)
    {
        Navigation.NavigateTo($"/configurations/{configuration.Id}");
    }

    private void EditConfiguration(Guid id)
    {
        Navigation.NavigateTo($"/configurations/{id}/edit");
    }

    private void ViewHistory(Guid id)
    {
        Navigation.NavigateTo($"/configurations/{id}/history");
    }

    private void ShowDeleteConfirmation(ConfigurationDto configuration)
    {
        Console.WriteLine($"ShowDeleteConfirmation called for: {configuration.Key}");
        NotificationService.Notify(NotificationSeverity.Info, "Debug", $"Delete button clicked for '{configuration.Key}'");

        _configurationToDelete = configuration;
        _showDeleteDialog = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        Console.WriteLine("Delete cancelled");
        NotificationService.Notify(NotificationSeverity.Info, "Cancelled", "Delete operation cancelled");

        _showDeleteDialog = false;
        _configurationToDelete = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (_configurationToDelete == null) return;

        try
        {
            Console.WriteLine($"User confirmed deletion for: {_configurationToDelete.Key}");

            // Hide dialog first
            _showDeleteDialog = false;
            StateHasChanged();

            // Perform the actual delete
            await ConfigurationClient.DeleteAsync(_configurationToDelete.Id);
            NotificationService.Notify(NotificationSeverity.Success, "Success",
                $"Configuration '{_configurationToDelete.Key}' deleted successfully");

            // Clear the reference
            _configurationToDelete = null;

            // Reload the data to refresh the list
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConfirmDelete: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Error deleting configuration: {ex.Message}");

            // Reset dialog state on error
            _showDeleteDialog = false;
            _configurationToDelete = null;
            StateHasChanged();
        }
    }

    private async Task TestDialog()
    {
        try
        {
            Console.WriteLine("TestDialog called");
            NotificationService.Notify(NotificationSeverity.Info, "Debug", "Test Dialog button clicked");

            var confirmed = await DialogService.Confirm(
                "This is a test dialog. Do you see this message?",
                "Test Dialog",
                new ConfirmOptions()
                {
                    OkButtonText = "Yes, I see it",
                    CancelButtonText = "No, I don't see it",
                    AutoFocusFirstElement = false
                });

            Console.WriteLine($"Test dialog result: {confirmed}");

            if (confirmed == true)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Dialog is working correctly!");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Warning", "Dialog might not be visible");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in TestDialog: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error with test dialog: {ex.Message}");
        }
    }
}
